// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }

        iResolution: {
          value: [20,20],
          inspector: {
            tooltip: "物体大小",
          }
        }

        iTime: {
          value: 1.0,
          inspector: {
            tooltip: "时间",
            range: [0.0,1.0]
          }
        }

}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

// 宏观调试
  #if USE_WATER

  uniform Water{
    vec2 iResolution;
    float iTime;

  };

#define F cos(x-y)*cos(y),sin(x+y)*sin(y)

    vec2 s(vec2 p)
    {
        float d=iTime*0.2,x=8.*(p.x+d),y=8.*(p.y+d);
        return vec2(F);
    }

    vec2 mainImage(vec2 fragCoord )
    {
        // 换成resolution
        vec2 rs = iResolution.xy;
        // 换成纹理坐标v_texCoord.xy
        vec2 uv = fragCoord;
        vec2 q = uv+2./iResolution.x*(s(uv)-s(uv+rs));
        //反转y
        //q.y=1.-q.y;
        return  q;
    } 

   #endif


  void main () {
    vec4 o = vec4(1, 1, 1, 1);

vec2 realPos = v_uv0;
    #if USE_WATER
    realPos=mainImage(v_uv0.xy);
    #endif

    #if USE_TEXTURE
    o *= texture(texture, realPos);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, realPos + vec2(0, 0.5)).r;
      #endif
    #endif

    o *= v_color;

    ALPHA_TEST(o);
    
    gl_FragColor = o;
  }
}%
