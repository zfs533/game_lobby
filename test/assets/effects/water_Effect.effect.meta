{
  "ver": "1.0.25",
  "uuid": "50cf9d1f-05ab-4036-b9fe-d46ec2c27a3d",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mediump mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n  precision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n  varying vec4 v_color;\n  #if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\n  #if USE_WATER\n  uniform vec2 iResolution;\nuniform float iTime;\n    vec2 s(vec2 p)\n    {\n        float d=iTime*0.2,x=8.*(p.x+d),y=8.*(p.y+d);\n        return vec2(cos(x-y)*cos(y),sin(x+y)*sin(y));\n    }\n    vec2 mainImage(vec2 fragCoord )\n    {\n        vec2 rs = iResolution.xy;\n        vec2 uv = fragCoord;\n        vec2 q = uv+2./iResolution.x*(s(uv)-s(uv+rs));\n        return  q;\n    }\n   #endif\n  void main () {\n    vec4 o = vec4(1, 1, 1, 1);\nvec2 realPos = v_uv0;\n    #if USE_WATER\n    realPos=mainImage(v_uv0.xy);\n    #endif\n    #if USE_TEXTURE\n    o *= texture2D(texture, realPos);\n      #if CC_USE_ALPHA_ATLAS_TEXTURE\n      o.a *= texture2D(texture, realPos + vec2(0, 0.5)).r;\n      #endif\n    #endif\n    o *= v_color;\n    ALPHA_TEST(o);\n    gl_FragColor = o;\n  }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  mediump mat4 cc_matViewInv;\n  mediump mat4 cc_matProj;\n  mediump mat4 cc_matProjInv;\n  mediump mat4 cc_matViewProj;\n  mediump mat4 cc_matViewProjInv;\n  mediump vec4 cc_cameraPos;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n  precision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n  in vec4 v_color;\n  #if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\n  #if USE_WATER\n  uniform Water{\n    vec2 iResolution;\n    float iTime;\n  };\n    vec2 s(vec2 p)\n    {\n        float d=iTime*0.2,x=8.*(p.x+d),y=8.*(p.y+d);\n        return vec2(cos(x-y)*cos(y),sin(x+y)*sin(y));\n    }\n    vec2 mainImage(vec2 fragCoord )\n    {\n        vec2 rs = iResolution.xy;\n        vec2 uv = fragCoord;\n        vec2 q = uv+2./iResolution.x*(s(uv)-s(uv+rs));\n        return  q;\n    }\n   #endif\n  void main () {\n    vec4 o = vec4(1, 1, 1, 1);\nvec2 realPos = v_uv0;\n    #if USE_WATER\n    realPos=mainImage(v_uv0.xy);\n    #endif\n    #if USE_TEXTURE\n    o *= texture(texture, realPos);\n      #if CC_USE_ALPHA_ATLAS_TEXTURE\n      o.a *= texture2D(texture, realPos + vec2(0, 0.5)).r;\n      #endif\n    #endif\n    o *= v_color;\n    ALPHA_TEST(o);\n    gl_FragColor = o;\n  }"
      }
    }
  ],
  "subMetas": {}
}